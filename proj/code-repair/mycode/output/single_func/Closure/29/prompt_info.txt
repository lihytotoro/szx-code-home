prefix:
private boolean isInlinableObject(List<Reference> refs) {
  boolean ret = false;

buggy_hunk:
  for (Reference ref : refs) {
    Node name = ref.getNode();
    Node parent = ref.getParent();
    Node gramps = ref.getGrandparent();
    if (parent.isGetProp()) {
      Preconditions.checkState(parent.getFirstChild() == name);
      if (gramps.isCall()
          && gramps.getFirstChild() == parent) {
        return false;
      }
      continue;
    }
    if (!isVarOrAssignExprLhs(name)) {
       return false;
    }
    Node val = ref.getAssignedValue();
    if (val == null) {
      continue;
    }
    if (!val.isObjectLit()) {
      return false;
    }
    for (Node child = val.getFirstChild(); child != null;
         child = child.getNext()) {
      if (child.isGetterDef() ||
          child.isSetterDef()) {
        return false;
      }

suffix:
      Node childVal = child.getFirstChild();
      for (Reference t : refs) {
        Node refNode = t.getParent();
        while (!NodeUtil.isStatementBlock(refNode)) {
          if (refNode == childVal) {
            return false;
          }
          refNode = refNode.getParent();
        }
      }
    }
    ret = true;
  }
  return ret;
}
