 The bug in the code is in the `switch` statement. The `case` statements for `CR`, `LF`, `FF`, and `TAB` are missing the `break` statement, which means that the control will fall through to the next case statement, which is `default`.

Here's the corrected version of the function:
```
int readEscape() throws IOException {
    // the escape char has just been read (normally a backslash)
    final int c = in.read();
    switch (c) {
    case 'r':
        return CR;
    case 'n':
        return LF;
    case 't':
        return TAB;
    case 'b':
        return BACKSPACE;
    case 'f':
        return FF;
    case CR:
    case LF:
    case FF:
    case TAB:
        return c;
    case END_OF_STREAM:
        throw new IOException("EOF whilst processing escape sequence");
    default:
        // Now check for meta-characters
        return c;
        // indicate unexpected char - available from in.getLastChar()
    }
}
```
With this correction, the function will return the correct character code for the escape sequence, rather than falling through to the `default` case and returning the wrong character.