{"Chart-1.java": [{"output": "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n    if (dataset != null) {\n        return result;\n    }\n    int seriesCount = dataset.getRowCount();\n    if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n        for (int i = 0; i < seriesCount; i++) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    else {\n        for (int i = seriesCount - 1; i >= 0; i--) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    return result;\n}", "diff": "", "finish_reason": "stop", "entropy": [0.1044319519287375, 1.6709112308598], "valid": false, "num": 1}], "Chart-10.java": [{"output": "public String generateToolTipFragment(String toolTipText) {\n\t\treturn \" title='\" + toolTipText + \"' \";\n        + \"\\\" alt=\\\"\\\"\";\n}", "diff": "--- \n+++ \n@@ -1,4 +1,4 @@\n public String generateToolTipFragment(String toolTipText) {\n-    return \" title=\\\"\" + toolTipText\n+\t\treturn \" title='\" + toolTipText + \"' \";\n         + \"\\\" alt=\\\"\\\"\";\n }\n", "finish_reason": "stop", "entropy": [0.39624933526217393, 9.11373471103], "valid": false, "num": 1}], "Chart-11.java": [{"output": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    boolean done = iterator1.isDone() && iterator2.isDone();\n    while (!done) {\n        if (iterator1.isDone() != iterator2.isDone()) {\n            return false;\n        }\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(d1, d2)) {\n            return false;\n        }\n        iterator1.next();\n        iterator2.next();\n        done = iterator1.isDone() && iterator2.isDone();\n    }\n    return true;\n}", "diff": "--- \n+++ \n@@ -9,7 +9,7 @@\n         return false;\n     }\n     PathIterator iterator1 = p1.getPathIterator(null);\n-    PathIterator iterator2 = p1.getPathIterator(null);\n+    PathIterator iterator2 = p2.getPathIterator(null);\n     double[] d1 = new double[6];\n     double[] d2 = new double[6];\n     boolean done = iterator1.isDone() && iterator2.isDone();\n", "finish_reason": "stop", "entropy": [0.1474582694442381, 3.096623658329], "valid": false, "num": 1}], "Chart-12.java": [{"output": "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n    if (dataset != null) {\n    PiePlot piePlot = new PiePlot(null);\n    this.pieChart = new JFreeChart(piePlot);\n    this.pieChart.removeLegend();\n    this.dataExtractOrder = TableOrder.BY_COLUMN;\n    this.pieChart.setBackgroundPaint(null);\n    TextTitle seriesTitle = new TextTitle(\"Series Title\",\n            new Font(\"SansSerif\", Font.BOLD, 12));\n    seriesTitle.setPosition(RectangleEdge.BOTTOM);\n    this.pieChart.setTitle(seriesTitle);\n    this.aggregatedItemsKey = \"Other\";\n    this.aggregatedItemsPaint = Color.lightGray;\n    this.sectionPaints = new HashMap();\n}", "diff": "--- \n+++ \n@@ -1,6 +1,6 @@\n public MultiplePiePlot(CategoryDataset dataset) {\n     super();\n-    this.dataset = dataset;\n+    if (dataset != null) {\n     PiePlot piePlot = new PiePlot(null);\n     this.pieChart = new JFreeChart(piePlot);\n     this.pieChart.removeLegend();\n", "finish_reason": "stop", "entropy": [0.24995794044335332, 3.7493691066503], "valid": false, "num": 1}]}