 The buggy function is:
```
private JavaType _mapType(Class<?> rawClass)
{
    // 28-May-2015, tatu: Properties are special, as per [databind#810]
    JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
    // ok to have no types ("raw")
    if (typeParams == null) {
        return MapType.construct(rawClass, _unknownType(), _unknownType());
    }
    // but exactly 2 types if any found
    if (typeParams.length != 2) {
        throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
    }
    return MapType.construct(rawClass, typeParams[0], typeParams[1]);
}
```
The bug is in the line `return MapType.construct(rawClass, _unknownType(), _unknownType());`. The function is returning a `MapType` with two unknown types, which is not correct.

The correct version of the function is:
```
private JavaType _mapType(Class<?> rawClass)
{
    // 28-May-2015, tatu: Properties are special, as per [databind#810]
    JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
    // ok to have no types ("raw")
    if (typeParams == null) {
        return MapType.construct(rawClass, null, null);
    }
    // but exactly 2 types if any found
    if (typeParams.length != 2) {
        throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
    }
    return MapType.construct(rawClass, typeParams[0], typeParams[1]);
}
```
The function is now returning a `MapType` with `null` for the key and value types, which is the correct behavior for a map with no type parameters.