public JsonToken nextToken() throws IOException {
    _binaryValue = null;
    if (_nextToken != null) {
        JsonToken t = _nextToken;
        _currToken = t;
        _nextToken = null;
        switch (t) {
        case START_OBJECT:
            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
            break;
        case START_ARRAY:
            _parsingContext = _parsingContext.createChildArrayContext(-1, -1);
            break;
        case END_OBJECT:
        case END_ARRAY:
            _parsingContext = _parsingContext.getParent();
            _namesToWrap = _parsingContext.getNamesToWrap();
            break;
        case FIELD_NAME:
            _parsingContext.setCurrentName(_xmlTokens.getLocalName());
            break;
        default: // VALUE_STRING, VALUE_NULL
            // should be fine as is?
        }
        return t;
    }
    int token = _xmlTokens.next();

    // Need to have a loop just because we may have to eat/convert
    // a start-element that indicates an array element.
    while (token == XmlTokenStream.XML_START_ELEMENT) {
        // If we thought we might get leaf, no such luck
        if (_mayBeLeaf) {
            // leave _mayBeLeaf set, as we start a new context
            _nextToken = JsonToken.FIELD_NAME;
            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
            return (_currToken = JsonToken.START_OBJECT);
        }
        if (_parsingContext.inArray()) {
            // Yup: in array, so this element could be verified; but it won't be
            // reported anyway, and we need to process following event.
            token = _xmlTokens.next();
            _mayBeLeaf = true;
            continue;
        }
        String name = _xmlTokens.getLocalName();
        _parsingContext.setCurrentName(name);

        // Ok: virtual wrapping can be done by simply repeating current START_ELEMENT.
        // Couple of ways to do it; but start by making _xmlTokens replay the thing...
        if (_namesToWrap != null && _namesToWrap.contains(name)) {
            _xmlTokens.repeatStartElement();
        }

        _mayBeLeaf = true;
        // Ok: in array context we need to skip reporting field names.
        // But what's the best way to find next token?
        return (_currToken = JsonToken.FIELD_NAME);
    }

    // Ok; beyond start element, what do we get?
    switch (token) {
    case XmlTokenStream.XML_END_ELEMENT:
        // Simple,
