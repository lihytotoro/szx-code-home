prefix:
protected BeanPropertyWriter buildWriter(SerializerProvider prov,
        BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,
        TypeSerializer typeSer, TypeSerializer contentTypeSer,
        AnnotatedMember am, boolean defaultUseStaticTyping)
    throws JsonMappingException
{
    JavaType serializationType;
    try {
        serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);
    } catch (JsonMappingException e) {
        return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());
    }
    if (contentTypeSer != null) {
        /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is
         *    type information for contents. Should work well (for JAXB case); can be
         *    revisited if this causes problems.
         */
        if (serializationType == null) {
            serializationType = declaredType;
        }
        JavaType ct = serializationType.getContentType();
        if (ct == null) {
            prov.reportBadPropertyDefinition(_beanDesc, propDef,
                    "serialization type "+serializationType+" has no content");
        }
        serializationType = serializationType.withContentTypeHandler(contentTypeSer);
        ct = serializationType.getContentType();
    }
    Object valueToSuppress = null;
    boolean suppressNulls = false;
    JavaType actualType = (serializationType == null) ? declaredType : serializationType;
    JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),
            _defaultInclusion);
    inclV = inclV.withOverrides(propDef.findInclusion());
    JsonInclude.Include inclusion = inclV.getValueInclusion();
    if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
        inclusion = JsonInclude.Include.ALWAYS;
    }
    switch (inclusion) {
    case NON_DEFAULT:

buggy_hunk:
        if (_useRealPropertyDefaults) {
            if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {
                am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
            }
            valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);

suffix:
        } else {
            valueToSuppress = getDefaultValue(actualType);
            suppressNulls = true;
        }
        if (valueToSuppress == null) {
            suppressNulls = true;
        } else {
            if (valueToSuppress.getClass().isArray()) {
                valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
            }
        }
        break;
    case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
        suppressNulls = true;
        if (actualType.isReferenceType()) {
            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
        }
        break;
    case NON_EMPTY:
        suppressNulls = true;
        valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
        break;
    case NON_NULL:
        suppressNulls = true;
    case ALWAYS: // default
    default:
        if (actualType.isContainerType()
                && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
        }
        break;
    }
    BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
            am, _beanDesc.getClassAnnotations(), declaredType,
            ser, typeSer, serializationType, suppressNulls, valueToSuppress);
    Object serDef = _annotationIntrospector.findNullSerializer(am);
    if (serDef != null) {
        bpw.assignNullSerializer(prov.serializerInstance(am, serDef));
    }
    NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);
    if (unwrapper != null) {
        bpw = bpw.unwrappingWriter(unwrapper);
    }
    return bpw;
}
