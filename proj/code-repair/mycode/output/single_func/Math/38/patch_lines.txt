           }            final int iptMinus1 = ipt;            final int jptMinus1 = jpt;            interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));            interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));        }        for (int j = 0; j < n; j++) {            currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],                                                      originShift.getEntry(j) + interpolationPoints.getEntry(nfm, j)),                                             upperBound[j]));            if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {                currentBest.setEntry(j, lowerBound[j]);            }            if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {                currentBest.setEntry(j, upperBound[